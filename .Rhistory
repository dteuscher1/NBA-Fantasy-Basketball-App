-team_alternate_color,
-team_color,
-team_short_display_name,
-ejected,
-starter,
-athlete_short_name,
-team_abbreviation,
-did_not_play
)
athletes <- game_info %>% select(athlete_display_name, athlete_id) %>% unique()
View(athletes)
thing <- expand.grid(unique(OKC_test$athlete_display_name), unique(OKC_test$game_id))
View(thing)
thing <- expand.grid(data.frame(unique(OKC_test$athlete_display_name), unique(OKC_test$game_id)))
OKC_test <- game_info %>% filter(team_short_display_name == "Thunder")
OKC_test <- game_info %>% filter(team_name == "Thunder")
thing <- expand.grid(data.frame(unique(OKC_test$athlete_display_name), unique(OKC_test$game_id)))
names(thing) <- c("athlete_display_name", "game_id")
inner_join(OKC_test, thing, by = game_id)
View(thing)
inner_join(OKC_test, thing, by = "game_id")
thing$game_id %>% as.numeric()
thing$game_id <- as.numeric(things$game_id)
thing$game_id <- as.numeric(thing$game_id)
thing <- expand.grid(unique(OKC_test$athlete_display_name), unique(OKC_test$game_id))
names(thing) <- c("athlete_display_name", "game_id")
inner_join(OKC_test, thing, by = "game_id")
left_join(OKC_test, thing, by = "game_id")
right_join(OKC_test, thing, by = "game_id")
install.packages(c("brew", "C50", "Cubist", "doParallel", "doSNOW", "gower", "iterators", "latex2exp", "lme4", "pbdZMQ", "quantreg", "randomForest", "rlang", "sf", "shinyWidgets", "svglite", "units", "V8"))
shiny::runApp()
runApp()
View(game_info)
View(game_info)
mean(game_info %>% filter(athlete_display_name == "Kevin Durant") %>% select(fantasy_pts))
game_info %>% filter(athlete_display_name == "Kevin Durant") %>% select(fantasy_pts)
game_info %>% filter(athlete_display_name == "Kevin Durant") %>% select(fantasy_pts) %>% mean()
game_info %>% filter(athlete_display_name == "Kevin Durant") %>% select(fantasy_pts) %>% as.numeric() %>% mean()
game_info %>% filter(athlete_display_name == "Kevin Durant") %>% select(fantasy_pts)
as.numeric(game_info %>% filter(athlete_display_name == "Kevin Durant") %>% select(fantasy_pts))
unlist(game_info %>% filter(athlete_display_name == "Kevin Durant") %>% select(fantasy_pts))
unlist(game_info %>% filter(athlete_display_name == "Kevin Durant") %>% select(fantasy_pts)) %>% mean()
runApp()
runApp()
icon('bball')
runApp()
icon('basketball')
runApp()
round(unlist(game_info %>% filter(athlete_display_name == "Kevin Durant") %>% select(fantasy_pts)) %>% mean(), 1)
game_info %>% filter(athlete_display_name == "Kevin Durant") %>% select(fantasy_pts))
game_info %>% filter(athlete_display_name == "Kevin Durant") %>% select(fantasy_pts))
game_info %>% filter(athlete_display_name == "Kevin Durant") %>% select(fantasy_pts))
game_info %>% filter(athlete_display_name == "Kevin Durant") %>% select(fantasy_pts
)
game_info %>% filter(athlete_display_name == "Chris Paul") %>% select(fantasy_pts)
game_info %>% filter(athlete_display_name == "Chris Paul") %>% select(fantasy_pts) %>% tail(10)
runApp()
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
library(ggplot2)
library(knitr)
library(mvtnorm)
q2_cases <- matrix(c(
4, 0, -1, 1, 1 / 2,
4, 0, -1, 1, 1,
4, 0, -1, 1, 2,
4, 0, 0, 1, 1 / 2,
4, 0, 0, 1, 1,
4, 0, 0, 1, 2,
4, 0, 1, 1, 1 / 2,
4, 0, 1, 1, 1,
4, 0, 1, 1, 2,
9, 0, -1, 1, 1 / 2,
9, 0, -1, 1, 1,
9, 0, -1, 1, 2,
9, 0, 0, 1, 1 / 2,
9, 0, 0, 1, 1,
9, 0, 0, 1, 2,
9, 0, 1, 1, 1 / 2,
9, 0, 1, 1, 1,
9, 0, 1, 1, 2,
25, 0, -1, 1, 1 / 2,
25, 0, -1, 1, 1,
25, 0, -1, 1, 2,
25, 0, 0, 1, 1 / 2,
25, 0, 0, 1, 1,
25, 0, 0, 1, 2,
25, 0, 1, 1, 1 / 2,
25, 0, 1, 1, 1,
25, 0, 1, 1, 2,
100, 0, -1, 1, 1 / 2,
100, 0, -1, 1, 1,
100, 0, -1, 1, 2,
100, 0, 0, 1, 1 / 2,
100, 0, 0, 1, 1,
100, 0, 0, 1, 2,
100, 0, 1, 1, 1 / 2,
100, 0, 1, 1, 1,
100, 0, 1, 1, 2
), nrow = 36, ncol = 5, byrow = TRUE)
q2_cases <- as.data.frame(q2_cases)
names(q2_cases) <- c("n", "beta0", "beta1", "beta2", "sigma2")
q2.sim <- function(n, beta0, beta1, beta2, sigma2) {
X <- as.matrix(expand.grid(seq(-1, 1, length = sqrt(n)), seq(-1, 1, length = sqrt(n))))
X <- cbind(rep(1, nrow(X)), X)
beta <- matrix(c(beta0, beta1, beta2), nrow = 3, ncol = 1, byrow = TRUE)
Sigma <- sigma2*diag(n)
y <- c(X %*% beta) + t(chol(Sigma)) %*% rnorm(nrow(X %*% beta))
beta_hat <- solve(t(X) %*% X) %*% (t(X) %*% y)
sigma2_hat <- (1 / n)*(t(y - (X %*% beta_hat)) %*% (y - (X %*% beta_hat)))
bias_beta1 <- beta_hat[2] - beta1 # Bias beta1_hat
bias_sigma2 <- sigma2_hat - sigma2 # Bias sigma2_hat
return(c(bias_beta1, bias_sigma2))
}
beta1_bias <- rep(NA, nrow(q2_cases))
sigma2_bias <- rep(NA, nrow(q2_cases))
for (i in 1:nrow(q2_cases)) {
beta1_bias[i] <- mean(
replicate(
10000,
q2.sim(
n = q2_cases[i,]$n,
beta0 = q2_cases[i,]$beta0,
beta1 = q2_cases[i,]$beta1,
beta2 = q2_cases[i,]$beta2,
sigma2 = q2_cases[i,]$sigma2
)[1]
)
)
sigma2_bias[i] <- mean(
replicate(
10000,
q2.sim(
n = q2_cases[i,]$n,
beta0 = q2_cases[i,]$beta0,
beta1 = q2_cases[i,]$beta1,
beta2 = q2_cases[i,]$beta2,
sigma2 = q2_cases[i,]$sigma2
)[2]
)
)
}
q2_df <- cbind(q2_cases, beta1_bias, sigma2_bias)
colnames(q2_df) <- c("n", "$\\beta_0$", "$\\beta_1$", "$\\beta_2$", "$\\sigma^2$", "Bias $\\hat{\\beta}_1$", "Bias $\\hat{\\sigma}^2$")
kable(
q2_df,
format = "markdown"
)
q4_cases <- matrix(c(
8, 0, -1, 1, 2, 1 / 2,
8, 0, -1, 1, 2, 1,
8, 0, -1, 1, 2, 2,
8, 0, 0, 1, 2, 1 / 2,
8, 0, 0, 1, 2, 1,
8, 0, 0, 1, 2, 2,
8, 0, 1, 1, 2, 1 / 2,
8, 0, 1, 1, 2, 1,
8, 0, 1, 1, 2, 2,
27, 0, -1, 1, 2, 1 / 2,
27, 0, -1, 1, 2, 1,
27, 0, -1, 1, 2, 2,
27, 0, 0, 1, 2, 1 / 2,
27, 0, 0, 1, 2, 1,
27, 0, 0, 1, 2, 2,
27, 0, 1, 1, 2, 1 / 2,
27, 0, 1, 1, 2, 1,
27, 0, 1, 1, 2, 2,
125, 0, -1, 1, 2, 1 / 2,
125, 0, -1, 1, 2, 1,
125, 0, -1, 1, 2, 2,
125, 0, 0, 1, 2, 1 / 2,
125, 0, 0, 1, 2, 1,
125, 0, 0, 1, 2, 2,
125, 0, 1, 1, 2, 1 / 2,
125, 0, 1, 1, 2, 1,
125, 0, 1, 1, 2, 2
), nrow = 27, ncol = 6, byrow = TRUE)
q4_cases <- as.data.frame(q4_cases)
names(q4_cases) <- c("n", "beta0", "beta1", "beta2", "beta3", "sigma2")
q4.sim <- function(n, beta0, beta1, beta2, beta3, sigma2) {
X <- as.matrix(
expand.grid(
seq(-1, 1, length = n^(1/3)),
seq(-1, 1, length = n^(1/3)),
seq(-1, 1, length = n^(1/3))
)
)
X <- cbind(rep(1, nrow(X)), X)
beta <- matrix(c(beta0, beta1, beta2, beta3), nrow = 4, ncol = 1, byrow = TRUE)
Sigma <- sigma2*diag(n)
y <- c(X %*% beta) + t(chol(Sigma)) %*% rnorm(nrow(X %*% beta))
beta_hat <- solve(t(X) %*% X) %*% (t(X) %*% y)
sigma2_hat <- (1 / n)*(t(y - (X %*% beta_hat)) %*% (y - (X %*% beta_hat)))
s2 <- (1 / (n - ncol(X)))*(t(y - (X %*% beta_hat)) %*% (y - (X %*% beta_hat)))
bias_sigma2_hat <- sigma2_hat - sigma2 # Bias beta1_hat
bias_s2 <- s2 - sigma2 # Bias sigma2_hat
return(c(bias_sigma2_hat, bias_s2))
}
sigma2_hat_bias <- rep(NA, nrow(q4_cases))
s2_bias <- rep(NA, nrow(q4_cases))
for (i in 1:nrow(q4_cases)) {
sigma2_hat_bias[i] <- mean(
replicate(
10000,
q4.sim(
n = q4_cases[i,]$n,
beta0 = q4_cases[i,]$beta0,
beta1 = q4_cases[i,]$beta1,
beta2 = q4_cases[i,]$beta2,
beta3 = q4_cases[i,]$beta3,
sigma2 = q4_cases[i,]$sigma2
)[1]
)
)
s2_bias[i] <- mean(
replicate(
10000,
q4.sim(
n = q4_cases[i,]$n,
beta0 = q4_cases[i,]$beta0,
beta1 = q4_cases[i,]$beta1,
beta2 = q4_cases[i,]$beta2,
beta3 = q4_cases[i,]$beta3,
sigma2 = q4_cases[i,]$sigma2
)[2]
)
)
}
y <- matrix(c(303.3, 467.1, 422.8, 391.6, 403.8, 373.8, 263.5, 226.8, 183.9, 208.4, 208.2, 168.8, 245.4, 160.0, 173.2), nrow = 15, ncol = 1, byrow = TRUE)
y
X <- matrix(c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
3, 6, 4, 5, 7, 6, 6, 5, 1, 3, 2, 1, 6, 2, 5,
1, 3, 1, 1, 1, 1, 1, 1, 3, 5, 3, 4, 5, 1, 1,
8, 3, 4, 3, 3, 3, 8, 8, 4, 2, 3, 3, 3, 5, 4,
1, 1, 1, 1, 3, 5, 5, 3, 2, 2, 1, 2, 1, 2, 2,
1, 2, 5, 1, 1, 2, 3, 2, 1, 4, 3, 3, 5, 2, 1), nrow = 15, ncol = 6, byrow = FALSE)
X
beta_hat <- solve(t(X) %*% X) %*% (t(X) %*% y)
beta_hat
s2 <- (1 / (nrow(X) - ncol(X)))*(t(y - (X %*% beta_hat)) %*% (y - (X %*% beta_hat)))
s2
inv_tXX <- solve(t(X) %*% X)
inv_tXX
as.numeric(s2) * inv_tXX # Variance-Covariance matrix of beta estimaves
A <- matrix(c(1, -1, 4,
-1, 1, 3,
4, 3, 2), nrow = 3, ncol = 3, byrow = TRUE)
B <- matrix(c(3, -2, 4,
7, 1, 0,
2, 3, 5), nrow = 3, ncol = 3, byrow = TRUE)
x <- matrix(c(1, -1, 2), nrow = 3, ncol = 1)
y <- matrix(c(3, 2, 1), nrow = 3, ncol = 1)
knitr::opts_chunk$set(echo = FALSE)
library(ggplot2)
library(patchwork)
library(rvest)
library(tidyverse)
mlb_lm <- lm(W ~ RunDiff + division, data = mlb)
knitr::opts_chunk$set(echo = FALSE)
library(ggplot2)
library(patchwork)
library(rvest)
library(tidyverse)
thiswebpage <- function(url) {
mlb <- url %>%
# read webpage and store in memory
read_html() %>%
# extract all the tables in the html code
html_nodes("table") %>%
# Select the 1st table: American League
.[2] %>%
# create R dataset from webpage contents (first table has the info we want)
# note: the .[[1]] extracts from how the rvest commands provide the result
html_table() %>%
.[[1]]
# colnames are in the first row of the data
colnames(mlb) <- mlb[1,]
mlb <- mlb %>%
# eliminate 'header' row for each division
slice(c(-1, -7, -13)) %>%
# convert columngs of interest to numeric
mutate(W = parse_number(W),
RunDiff = parse_number(substring(DIFF, 2))
* ifelse(substring(DIFF, 1, 1) == "+", 1, -1)) %>%
select("W", "RunDiff")
# add the division factor (compare other divisions to AL East)
mlb$division <- c(rep("East", 5), rep("Central", 5), rep("West", 5))
mlb
}
# vector of urls from ESPN webpage standings
# since 2013 each division has 5 teams
ALwebpages <- c("https://www.espn.com/mlb/standings/_/season/2021",
# skip 2020 --- covid shortened season
paste0("https://www.espn.com/mlb/standings/_/season/", 2013:2019))
mlb <- map_dfr(ALwebpages, thiswebpage)
w_df <- data.frame(
East = c(tapply(mlb$W, mlb$division, summary)$East),
Central = c(tapply(mlb$W, mlb$division, summary)$Central),
West = c(tapply(mlb$W, mlb$division, summary)$West)
)
knitr::kable(
t(w_df),
col.names = c("Min", "1st Quantile", "Median", "Mean", "3rd Quantile", "Max"),
caption = "Wins Summary Statistics",
label = "Table 1"
)
RunDiff_df <- data.frame(
East = c(tapply(mlb$RunDiff, mlb$division, summary)$East),
Central = c(tapply(mlb$RunDiff, mlb$division, summary)$Central),
West = c(tapply(mlb$RunDiff, mlb$division, summary)$West)
)
knitr::kable(
t(RunDiff_df),
col.names = c("Min", "1st Quantile", "Median", "Mean", "3rd Quantile", "Max"),
caption = "Run Differential Summary Statistics",
label = "Table 2"
)
ggplot(mlb, aes(x = RunDiff, y = W)) +
geom_point(aes(color = division)) +
scale_color_discrete(name = "Division") +
theme_minimal() +
theme(
legend.position = "top",
legend.direction = "horizontal"
) +
labs(
title = "American League Run Differential vs Wins",
x = "Run Differential",
y = "Wins",
caption = "Figure 1"
)
mlb_lm <- lm(W ~ RunDiff + division, data = mlb)
summary(mlb_lm)
View(mlb)
library(ggplot2)
game_stats <- read.csv("game_stats.csv")
View(game_stats)
library(tidyverse)
game_stats %>%
filter(athlete_position_abbreviation == "PG") %>%
ggplot(., aes(x = game_id, y = fantasy_pts, group = athlete_display_name)) +
geom_line()
game_stats %>%
filter(athlete_position_abbreviation == "PG") %>%
ggplot(aes(x = game_id, y = fantasy_pts, group = athlete_display_name)) +
geom_line()
game_stats %>%
select(athlete_display_name, athlete_position_abbreviation, fantasy_pts, game_id) %>%
melt(id.vars = "athlete_display_name")
library(reshape)
game_stats %>%
select(athlete_display_name, athlete_position_abbreviation, fantasy_pts, game_id) %>%
melt(id.vars = "athlete_display_name")
game_stats %>%
select(athlete_display_name, athlete_position_abbreviation, fantasy_pts, game_id) %>%
# melt(id.vars = "athlete_display_name") %>%
filter(athlete_position_abbreviation == "PG") %>%
ggplot(aes(x = game_id, y = fantasy_pts)) +
geom_line()
max(game_stats$game_id) - min(game_stats$game_id)
42370/82
game_stats %>%
select(athlete_display_name, fantasy_pts) %>%
filter(athlete_display_name == "Kevin Durant") %>%
ggplot(aes(x = fantasy_pts)) +
geom_histogram(aes(y = ..density..),      # Histogram with density instead of count on y-axis
binwidth = .5,
color = "black",
fill = "white") +
geom_density(alpha = .2, fill = "#FF6666")  # Overlay with transparent density plot
game_stats %>%
select(athlete_display_name, fantasy_pts) %>%
filter(athlete_display_name == "Kevin Durant") %>%
ggplot(aes(x = fantasy_pts)) +
geom_histogram(aes(y = ..density..),      # Histogram with density instead of count on y-axis
# binwidth = .5,
color = "black",
fill = "white") +
geom_density(alpha = .2, fill = "#FF6666")  # Overlay with transparent density plot
game_stats %>%
select(athlete_display_name, fantasy_pts) %>%
filter(athlete_display_name == "Kevin Durant") %>%
ggplot(aes(x = fantasy_pts)) +
geom_histogram(aes(y = ..density..),      # Histogram with density instead of count on y-axis
binwidth = 5,
color = "black",
fill = "white") +
geom_density(alpha = .2, fill = "#FF6666")  # Overlay with transparent density plot
game_stats %>%
select(athlete_display_name, fantasy_pts) %>%
filter(athlete_display_name == "Kevin Durant") %>%
ggplot(aes(x = fantasy_pts)) +
geom_histogram(aes(y = ..density..),      # Histogram with density instead of count on y-axis
binwidth = 5,
color = "black",
fill = "white") +
geom_density(alpha = .2, fill = "#FF6666") +  # Overlay with transparent density plot
geom_vline(aes(xintercept = mean(fantasy_pts, na.rm = TRUE)),   # Ignore NA values for mean
color = "red", linetype = "dashed", size = 1) +
theme_minimal()
game_stats %>%
select(athlete_display_name, fantasy_pts, game_id) %>%
# melt(id.vars = "athlete_display_name") %>%
filter(athlete_display_name == "Kevin Durant") %>%
ggplot(aes(x = game_id, y = fantasy_pts)) +
geom_line()
game_stats %>%
select(athlete_display_name, fantasy_pts, game_id) %>%
# melt(id.vars = "athlete_display_name") %>%
filter(athlete_display_name == "Kevin Durant") %>%
ggplot(aes(x = game_id, y = fantasy_pts)) +
geom_line() +
theme_minimal()
game_stats %>%
select(athlete_display_name, fantasy_pts, game_id) %>%
# melt(id.vars = "athlete_display_name") %>%
filter(athlete_display_name == "Kevin Durant")
game_info <- read.csv("game_stats.csv")
game_info <- game_info %>%
select(
-athlete_jersey,
-athlete_headshot_href,
-athlete_position_name,
-team_logo,
-team_alternate_color,
-team_color,
-team_short_display_name,
-ejected,
-starter,
-athlete_short_name,
-team_abbreviation,
-did_not_play
)
View(game_info)
athletes <- game_info %>% select(athlete_display_name, athlete_id) %>% unique()
View(athletes)
game_info %>% filter(athlete_display_name == "Kevin Durant") %>% select(fantasy_pts)
game_info %>% filter(athlete_display_name == "Trae Young") %>% select(fantasy_pts)
game_info %>% filter(athlete_display_name == "Nikola Jokic") %>% select(fantasy_pts)
game_info %>% filter(athlete_display_name == "Kevon Looney") %>% select(fantasy_pts)
OKC_test <- game_info %>% filter(team_name == "Thunder")
thing <- expand.grid(unique(OKC_test$athlete_display_name), unique(OKC_test$game_id))
View(thing)
unlist(game_info %>% filter(athlete_display_name == "Kevin Durant") %>% select(fantasy_pts)) %>% mean()
OKC_test %>% unique(game_id)
View(OKC_test)
OKC_test %>% select(game_id) %>% unique()
rlnorm(4, meanlog = .5, sdlog = 1)
prod(rlnorm(4, meanlog = .5, sdlog = 1))
prod(rlnorm(4, meanlog = .5, sdlog = 1)) >= 50
prod(rlnorm(4, meanlog = .5, sdlog = 1)) >= 50
sum(rep(1000, prod(rlnorm(4, meanlog = .5, sdlog = 1)) >= 50))
rep(1000, prod(rlnorm(4, meanlog = .5, sdlog = 1)) >= 50)
replicate(1000, prod(rlnorm(4, meanlog = .5, sdlog = 1)) >= 50)
sum(replicate(1000, prod(rlnorm(4, meanlog = .5, sdlog = 1)) >= 50))
mean(replicate(1000, prod(rlnorm(4, meanlog = .5, sdlog = 1)) >= 50))
mean(replicate(1000, prod(rlnorm(4, meanlog = .5, sdlog = 1)) >= 50))
mean(replicate(1000000, prod(rlnorm(4, meanlog = .5, sdlog = 1)) >= 50))
x <- seq(0, 10, by = .01)
func <- function(x) {
y <- (1 / (x + 10)) + 1
}
func(x)
x <- seq(0, 10, by = .01)
func <- function(x) {
(1 / (x + 10)) + 1
}
func(x)
result <- func(x)
which.max(result)
x <- seq(0, 10, by = .01)
func <- function(x) {
(1 / (x - 10)) + 1
}
result <- func(x)
which.max(result)
result
x <- seq(1, 99, by = 1)
x
factorial(3)
x / factorial(x + 1)
sum(x / factorial(x + 1))
factorial(101)
library(nbastatR)
install.packages('nbastatR')
devtools::install_github("abresler/nbastatR")
install.packages(c("applicable", "callr", "cluster", "dtplyr", "forcats", "gert", "haven", "infer", "poissonreg", "proxyC", "ridigbio", "rstudioapi", "scales", "tsibble", "tweenr", "uwot", "viridisLite"))
library(nbastatR)
warnings()
library(hoopR)
View(game_stats)
nba_commonteamroster(
league_id = "00",
season = "2021-22",
team_id = "25"
)
nba_commonteamroster(
league_id = "00",
season = "2021-22",
team_id = "1610612739"
)
nba_commonteamroster(
league_id = "00",
season = "2021-22",
team_id = "1610612739"
)$CommonTeamRoster
cavs_roster <- nba_commonteamroster(
league_id = "00",
season = "2021-22",
team_id = "1610612739"
)$CommonTeamRoster
View(cavs_roster)
View(cavs_roster)
